from flask import Flask, request, make_response
import mysql.connector

app = Flask(__name__)

db_config = {
    'user': 'your_username',
    'password': 'your_password',
    'host': 'your_host',
    'database': 'your_database'
}

def ServerConnection(user = '', password = '', host = '', database = ''):
    connection = None
    try:
        connection = mysql.connector.connect(**config)
        print("MySQL Database connection successful")
    except Error as err:
        print(f"Error: '{err}'")
    return connection



@app.route('/Register', methods=['PUT'])
def Register_User(uname, upass):
    try:
        connection = ServerConnection(db_config)
        cursor = connection.cursor()

        cursor.execute("SELECT MAX(UserID) FROM Account")
        max_id = cursor.fetchone()[0]
        new_id = max_id + 1

        content = request.json
        username = content.get('Username')
        password = content.get('Password')

        cursor.execute("INSERT INTO Account (UserID, Username, Password) VALUES (%s, %s, %s)", (new_id, username, password))
        connection.commit()
        cursor.close()

        return make_response({"success": "User registered successfully", "UserID": new_id}, 202)
    except mysql.connector.Error as err:
        return make_response({'error': f"An error occurred: {err}"}, 400)
    finally:
        if connection is not None:
            connection.close() 

@app.route('/Userlogin', methods=['GET'])
def User_Login(uname, upass):
    try:
        connection = ServerConnection(db_config)

        cursor = connection.cursor()
        cursor.excecute(f"SELECT * FROM Account WHERE Username={uname} AND password={upass}")
        #make_response
        cursor.close
    except:
        return make_response({'error': 'An error has occured'}, 400)

@app.route('/add_Course', methods=['POST'])
def create_Course():
    try:
        connection = ServerConnection(db_config)
        cursor = connection.cursor()

        content = request.json
        CourseC = content.get('CourseC')
        CourseName = content.get('CourseName')
        StartDt = content.get('StartDt')
        EndDt = content.get('EndDt')

        cursor.execute("INSERT INTO Course (CourseC, CourseName, StartDt, EndDt) VALUES (%s, %s, %s, %s)", (CourseC, CourseName, StartDt, EndDt))
        connection.commit()
        cursor.close()

        return make_response({"success": "Course added successfully"}, 200)
    except mysql.connector.Error as err:
        return make_response({'error': f"An error occurred: {err}"}, 400)
    finally:
        if connection is not None:
            connection.close()

@app.route('/find_Course', methods=['GET'])
def get_Course(cName):
    try:
        connection = ServerConnection(db_config)

        cursor = connection.cursor()
        cursor.execute(f"SELECT * FROM Course WHERE courseName={cName}")
        row = cursor.fetchone()
        course = {}
        if row is not None:
            CourseC, CourseName, StartDt, EndDt = row
            course["Coursec"] = CourseC
            course["CourseName"] = CourseName
            course["StartDt"] = StartDt
            course["EndDt"] = EndDt
            cursor.close()
            return make_response(course, 200)
        else:
            return make_response({'error': "Anerror has occured"}, 400)

    except:
        return make_response({'error': 'An error has occured'}, 400)

@app.route()
def Course_Register():
    connection = ServerConnection(db_config)
    return

@app.route()
def get_CourseMembers():
    try:
        connection = ServerConnection(db_config)

        cursor = connection.cursor()
        cursor.execute("SELECT * FROM Student WHERE STudentID IN (SELECT StudentID FROM Assignments WHERE CourseC=%s)", (CourseC))
        students = cursor.fethchall()
        cursor.close()
        return jsonify(students), 200
    except:
        return jsonify({'error': f"An error has occurred: {err}"}), 500

    finally:
        if connection is not None:
            connection.close()

@app.route()
def get_CalendarEvents():
    try:
        connection = ServerConnection(db_config)
        
        cursor = connection.cursor()
        cursor.excecute(f"SELECT * FROM Calendar")
        row = cursor.fetchone
        events = {}
        if row is not None:
            EventID, CourseID, Title, SDate, EDate = row
            events['EventID'] = EventID
            events['CourseID'] = CourseID
            events['Title'] = Title
            events['SDate'] = SDate
            events['EDate'] = EDate
            cursor.close()
            return make_response(events, 200)
        else:
            return make_response({'error': 'Student not found'}, 400)
    except:
        return make_response({'error': 'An error has occured'}, 400)

@app.route()
def create_CalendarEvents(CourseID, Title, SDate, EDate):
    try:
        connection = ServerConnection(db_config)
        cursor = connection.cursor()

        #content = request.jsonCourseID = content.get('CourseID')Title = content.get('Title')SDate = content.get('SDate')EDate = content.get('EDate')
        cursor.execute("INSERT INTO Calendar (CourseID, Title, SDate, EDate) VALUES (%s, %s, %s, %s)", (CourseID, Title, SDate, EDate))
        connection.commit()
        cursor.close()

        return make_response({"success": "Calendar event created successfully"}, 200)
    except mysql.connector.Error as err:
        return make_response({'error': f"An error occurred: {err}"}, 400)
    finally:
        if connection is not None:
            connection.close()

@app.route()
def manage_Forums():
    connection = ServerConnection(db_config)
    return

@app.route()
def manage_DiscussionThread():
    connection = ServerConnection(db_config)
    return

@app.route()
def manage_CourseContent(CourseC):
    connection = ServerConnection(db_config)
    return

@app.route()
def manage_Assignments():
    connection = ServerConnection(db_config)
    return

@app.route()
def make_Reports():
    connection = ServerConnection(db_config)
    return
    
if __name__ == '__main__':
    app.run(debug = True,port=3000)
